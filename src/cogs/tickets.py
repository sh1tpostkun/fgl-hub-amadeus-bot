from __future__ import annotations

import discord
from discord import app_commands
from discord.ext import commands
import typing as t


class TicketButton(discord.ui.View):
    def __init__(self, bot: commands.Bot, category_id: int | None = None, support_role_id: int | None = None):
        super().__init__(timeout=None)
        self.bot = bot
        self.category_id = category_id
        self.support_role_id = support_role_id

    @discord.ui.button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.primary, emoji="üé´", custom_id="create_ticket")
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = interaction.guild
        if not guild:
            return await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = self.bot.db  # type: ignore[attr-defined]
        existing = await db.fetchone("SELECT channel_id FROM tickets WHERE owner_id=?", interaction.user.id)
        if existing:
            channel = guild.get_channel(existing[0])
            if channel:
                return await interaction.response.send_message(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç: {channel.mention}", ephemeral=True)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –≤ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not self.category_id:
            return await interaction.response.send_message(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ticket setup.", ephemeral=True
            )
        category = guild.get_channel(self.category_id)
        if not isinstance(category, discord.CategoryChannel):
            return await interaction.response.send_message(
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /ticket setup.", ephemeral=True
            )

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
        }
        if self.support_role_id:
            role = guild.get_role(self.support_role_id)
            if role:
                overwrites[role] = discord.PermissionOverwrite(view_channel=True, send_messages=True)

        channel = await guild.create_text_channel(
            name=f"ticket-{interaction.user.name}",
            category=category,
            overwrites=overwrites,
            reason=f"Ticket for {interaction.user}",
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await db.exec("INSERT OR REPLACE INTO tickets(channel_id, owner_id) VALUES(?, ?)", channel.id, interaction.user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = discord.Embed(
            title="üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω",
            description=f"–ü—Ä–∏–≤–µ—Ç, {interaction.user.mention}!\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
            color=discord.Color.green()
        )
        embed.set_footer(text=f"ID: {interaction.user.id}")
        embed.timestamp = discord.utils.utcnow()

        close_view = CloseTicketView()
        await channel.send(embed=embed, view=close_view)
        await interaction.response.send_message(f"‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {channel.mention}", ephemeral=True)


class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.danger, emoji="üîí", custom_id="close_ticket")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        channel = interaction.channel
        if not isinstance(channel, discord.TextChannel):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.manage_channels:
            return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–æ–≤.", ephemeral=True)

        await interaction.response.send_message("üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...", ephemeral=True)

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ª–æ–≥ –∏ —É–¥–∞–ª–∏–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 5 —Å–µ–∫
        db = interaction.client.db  # type: ignore[attr-defined]
        guild = interaction.guild
        log_channel_id_row = await db.fetchone("SELECT value FROM settings WHERE key='tickets_closed_channel_id'")
        log_channel = None
        if log_channel_id_row and guild:
            log_channel = guild.get_channel(int(log_channel_id_row[0]))

        embed = discord.Embed(
            title="üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç",
            description=f"–ö–∞–Ω–∞–ª: {channel.mention}\n–ó–∞–∫—Ä—ã–ª: {interaction.user.mention}",
            color=discord.Color.red(),
            timestamp=discord.utils.utcnow(),
        )
        if isinstance(channel, discord.TextChannel):
            last_msgs = []
            try:
                async for m in channel.history(limit=10, oldest_first=False):
                    if m.author.bot:
                        continue
                    last_msgs.append(f"{m.author.display_name}: {m.content[:120]}")
            except Exception:
                pass
            if last_msgs:
                embed.add_field(name="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", value="\n".join(reversed(last_msgs)), inline=False)

        # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await db.exec("DELETE FROM tickets WHERE channel_id=?", channel.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥
        if isinstance(log_channel, discord.TextChannel):
            try:
                await log_channel.send(embed=embed)
            except Exception:
                pass

        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        try:
            await channel.delete(reason=f"Ticket closed by {interaction.user}")
        except Exception:
            pass


class Tickets(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.category_id: int | None = None  # optional: preset category
        self.support_role_id: int | None = None

    ticket = app_commands.Group(name="ticket", description="–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤")

    @ticket.command(name="setup", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ä–æ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏)")
    @app_commands.default_permissions(manage_channels=True)
    async def setup(self, interaction: discord.Interaction, category: t.Optional[discord.CategoryChannel] = None, support_role: t.Optional[discord.Role] = None):
        if category:
            self.category_id = category.id
        if support_role:
            self.support_role_id = support_role.id
        # persist settings in DB for persistence views
        db = self.bot.db  # type: ignore[attr-defined]
        if self.category_id:
            await db.exec("INSERT OR REPLACE INTO settings(key, value) VALUES('tickets_category_id', ?)", str(self.category_id))
        if self.support_role_id:
            await db.exec("INSERT OR REPLACE INTO settings(key, value) VALUES('tickets_support_role_id', ?)", str(self.support_role_id))
        await interaction.response.send_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", ephemeral=True)

    @ticket.command(name="set-closed-channel", description="–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
    @app_commands.default_permissions(manage_channels=True)
    async def set_closed_channel(self, interaction: discord.Interaction, channel: discord.TextChannel):
        db = self.bot.db  # type: ignore[attr-defined]
        await db.exec("INSERT OR REPLACE INTO settings(key, value) VALUES('tickets_closed_channel_id', ?)", str(channel.id))
        await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {channel.mention}", ephemeral=True)

    @ticket.command(name="close", description="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
    async def close(self, interaction: discord.Interaction):
        channel = interaction.channel
        if not isinstance(channel, discord.TextChannel):
            return await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        db = self.bot.db  # type: ignore[attr-defined]
        row = await db.fetchone("SELECT owner_id FROM tickets WHERE channel_id=?", channel.id)
        if not row:
            return await interaction.response.send_message("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–∫–µ—Ç–æ–º.", ephemeral=True)
        await db.exec("DELETE FROM tickets WHERE channel_id=?", channel.id)
        await interaction.response.send_message("üîí –ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.", ephemeral=True)
        await discord.utils.sleep_until(discord.utils.utcnow() + discord.utils.timedelta(seconds=5))
        await channel.delete(reason=f"Ticket closed by {interaction.user}")

    @ticket.command(name="add", description="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç–∏–∫–µ—Ç")
    async def add(self, interaction: discord.Interaction, user: discord.Member):
        channel = interaction.channel
        if not isinstance(channel, discord.TextChannel):
            return await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        overwrite = channel.overwrites_for(user)
        overwrite.view_channel = True
        overwrite.send_messages = True
        await channel.set_permissions(user, overwrite=overwrite, reason=f"Ticket add by {interaction.user}")
        await interaction.response.send_message(f"üë§ {user.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç.", ephemeral=True)

    @ticket.command(name="remove", description="–£–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç–∏–∫–µ—Ç–∞")
    async def remove(self, interaction: discord.Interaction, user: discord.Member):
        channel = interaction.channel
        if not isinstance(channel, discord.TextChannel):
            return await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        await channel.set_permissions(user, overwrite=None, reason=f"Ticket remove by {interaction.user}")
        await interaction.response.send_message(f"üö´ {user.mention} —É–±—Ä–∞–Ω –∏–∑ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)

    @ticket.command(name="panel", description="–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π")
    @app_commands.default_permissions(manage_channels=True)
    async def create_panel(self, interaction: discord.Interaction, title: str, description: str, channel: t.Optional[discord.TextChannel] = None):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ embed-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤"""
        target_channel = channel or interaction.channel
        if not isinstance(target_channel, discord.TextChannel):
            return await interaction.response.send_message("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª.", ephemeral=True)

        embed = discord.Embed(
            title=title,
            description=description,
            color=discord.Color.blurple()
        )
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
        embed.timestamp = discord.utils.utcnow()

        view = TicketButton(self.bot, self.category_id, self.support_role_id)
        await target_channel.send(embed=embed, view=view)
        await interaction.response.send_message(f"‚úÖ –ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –≤ {target_channel.mention}", ephemeral=True)

    @app_commands.command(name="create", description="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç")
    async def create_ticket(self, interaction: discord.Interaction, topic: str):
        guild = interaction.guild
        assert guild is not None
        if not self.category_id:
            return await interaction.response.send_message(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ticket setup.", ephemeral=True
            )
        category = guild.get_channel(self.category_id)
        if not isinstance(category, discord.CategoryChannel):
            return await interaction.response.send_message(
                "–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /ticket setup.", ephemeral=True
            )
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
        }
        if self.support_role_id:
            role = guild.get_role(self.support_role_id)
            if role:
                overwrites[role] = discord.PermissionOverwrite(view_channel=True, send_messages=True)

        channel = await guild.create_text_channel(
            name=f"ticket-{interaction.user.name}",
            category=category,
            overwrites=overwrites,
            reason=f"Ticket for {interaction.user} | {topic}",
        )

        db = self.bot.db  # type: ignore[attr-defined]
        await db.exec("INSERT OR REPLACE INTO tickets(channel_id, owner_id) VALUES(?, ?)", channel.id, interaction.user.id)

        embed = discord.Embed(title="–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω", description=topic, color=discord.Color.green())
        embed.add_field(name="–ê–≤—Ç–æ—Ä", value=interaction.user.mention)
        close_view = CloseTicketView()
        await channel.send(embed=embed, view=close_view)
        await interaction.response.send_message(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª {channel.mention}", ephemeral=True)


async def setup(bot: commands.Bot):
    await bot.add_cog(Tickets(bot))


