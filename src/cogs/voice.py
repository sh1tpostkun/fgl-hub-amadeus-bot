from __future__ import annotations

from typing import Optional

import discord
from discord.ext import commands


class VoiceControlModal(discord.ui.Modal, title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º"):
    def __init__(self, voice_channel: discord.VoiceChannel, action: str, **kwargs):
        super().__init__(**kwargs)
        self.voice_channel = voice_channel
        self.action = action
        
        if action == "rename":
            self.name_input = discord.ui.TextInput(
                label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                placeholder=f"–¢–µ–∫—É—â–µ–µ: {voice_channel.name}",
                default=voice_channel.name.replace("üîí ", ""),
                max_length=100,
                required=True
            )
            self.add_item(self.name_input)
        elif action == "limit":
            self.limit_input = discord.ui.TextInput(
                label="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
                placeholder="0",
                default=str(voice_channel.user_limit) if voice_channel.user_limit else "0",
                max_length=2,
                required=True
            )
            self.add_item(self.limit_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if self.action == "rename":
                new_name = f"üîí {self.name_input.value}"
                await self.voice_channel.edit(name=new_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cog = interaction.client.get_cog("PrivateVoice")
                if cog and hasattr(cog, 'save_user_voice_settings'):
                    await cog.save_user_voice_settings(
                        interaction.user.id, 
                        self.name_input.value, 
                        self.voice_channel.user_limit or 0,
                        False  # is_locked
                    )
                
                await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_name}", ephemeral=True)
                
            elif self.action == "limit":
                try:
                    limit = int(self.limit_input.value)
                    if limit < 0:
                        limit = 0
                    await self.voice_channel.edit(user_limit=limit)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cog = interaction.client.get_cog("PrivateVoice")
                    if cog and hasattr(cog, 'save_user_voice_settings'):
                        channel_name = self.voice_channel.name.replace("üîí ", "")
                        await cog.save_user_voice_settings(
                            interaction.user.id, 
                            channel_name, 
                            limit,
                            False  # is_locked
                        )
                    
                    limit_text = "–±–µ–∑ –ª–∏–º–∏—Ç–∞" if limit == 0 else str(limit)
                    await interaction.response.send_message(f"‚úÖ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit_text}", ephemeral=True)
                except ValueError:
                    await interaction.response.send_message("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", ephemeral=True)
                    return
                    
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)


class VoiceControlView(discord.ui.View):
    def __init__(self, voice_channel: discord.VoiceChannel, owner_id: int):
        super().__init__(timeout=None)
        self.voice_channel = voice_channel
        self.owner_id = owner_id

    @discord.ui.button(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", style=discord.ButtonStyle.primary, emoji="‚úèÔ∏è", custom_id="voice_rename")
    async def rename_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        await interaction.response.send_modal(VoiceControlModal(self.voice_channel, "rename"))

    @discord.ui.button(label="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", style=discord.ButtonStyle.secondary, emoji="üë•", custom_id="voice_limit")
    async def limit_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        await interaction.response.send_modal(VoiceControlModal(self.voice_channel, "limit"))

    @discord.ui.button(label="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.danger, emoji="üîí", custom_id="voice_lock")
    async def lock_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(connect=False),
            interaction.user: discord.PermissionOverwrite(connect=True)
        }
        await self.voice_channel.edit(overwrites=overwrites)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        cog = interaction.client.get_cog("PrivateVoice")
        if cog and hasattr(cog, 'save_user_voice_settings'):
            channel_name = self.voice_channel.name.replace("üîí ", "")
            await cog.save_user_voice_settings(
                interaction.user.id, 
                channel_name, 
                self.voice_channel.user_limit or 0,
                True  # is_locked
            )
        
        await interaction.response.send_message("üîí –ö–∞–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ephemeral=True)

    @discord.ui.button(label="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.success, emoji="üîì", custom_id="voice_unlock")
    async def unlock_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(connect=True)
        }
        await self.voice_channel.edit(overwrites=overwrites)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        cog = interaction.client.get_cog("PrivateVoice")
        if cog and hasattr(cog, 'save_user_voice_settings'):
            channel_name = self.voice_channel.name.replace("üîí ", "")
            await cog.save_user_voice_settings(
                interaction.user.id, 
                channel_name, 
                self.voice_channel.user_limit or 0,
                False  # is_locked
            )
        
        await interaction.response.send_message("üîì –ö–∞–Ω–∞–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ephemeral=True)

    @discord.ui.button(label="–ü–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ", style=discord.ButtonStyle.primary, emoji="üëë", custom_id="voice_transfer")
    async def transfer_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        modal = TransferModal(self.voice_channel)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.danger, emoji="üóëÔ∏è", custom_id="voice_delete")
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.owner_id:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º", ephemeral=True)
            return
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (—ç–ø–µ–º–µ—Ä–∞–ª—å–Ω–æ), —á—Ç–æ–±—ã –Ω–µ –∏—Å—Ç–µ–∫–∞–ª–æ
            if not interaction.response.is_done():
                await interaction.response.defer(ephemeral=True)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            cog = interaction.client.get_cog("PrivateVoice")
            if cog and hasattr(cog, 'text_channels'):
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                if self.voice_channel.id in cog.text_channels:
                    text_channel_id = cog.text_channels.pop(self.voice_channel.id)
                    try:
                        text_channel = interaction.guild.get_channel(text_channel_id)
                        if text_channel:
                            await text_channel.delete(reason="Voice channel deleted by owner")
                    except Exception:
                        pass

            # –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            try:
                await self.voice_channel.delete(reason=f"Deleted by {interaction.user}")
            except Exception:
                pass

            # –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç followup-–æ—Ç–≤–µ—Ç–æ–º
            await interaction.followup.send("üóëÔ∏è –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω", ephemeral=True)
        except Exception as e:
            try:
                if interaction.response.is_done():
                    await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", ephemeral=True)
                else:
                    await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", ephemeral=True)
            except Exception:
                pass


class TransferModal(discord.ui.Modal, title="–ü–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"):
    def __init__(self, voice_channel: discord.VoiceChannel, **kwargs):
        super().__init__(**kwargs)
        self.voice_channel = voice_channel
        
        self.user_input = discord.ui.TextInput(
            label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            placeholder="@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ 123456789",
            required=True
        )
        self.add_item(self.user_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_input = self.user_input.value.strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = None
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if user_input.startswith('<@') and user_input.endswith('>'):
                user_id = int(user_input[2:-1])
                user = interaction.guild.get_member(user_id)
            # –ï—Å–ª–∏ —ç—Ç–æ ID
            elif user_input.isdigit():
                user_id = int(user_input)
                user = interaction.guild.get_member(user_id)
            
            if not user:
                await interaction.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cog = interaction.client.get_cog("PrivateVoice")
            if cog and hasattr(cog, 'owner_map'):
                cog.owner_map[self.voice_channel.id] = user.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(view_channel=False, connect=False),
                user: discord.PermissionOverwrite(view_channel=True, connect=True, manage_channels=True),
            }
            await self.voice_channel.edit(overwrites=overwrites)
            
            await interaction.response.send_message(f"üëë –í–ª–∞–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞–Ω–æ {user.mention}", ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)


class PrivateVoice(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.template_channel_id: Optional[int] = None  # –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª-—à–∞–±–ª–æ–Ω
        self.owner_map: dict[int, int] = {}  # channel_id -> owner_id
        self.text_channels: dict[int, int] = {}  # voice_channel_id -> text_channel_id

    async def cog_load(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–∞: –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            row = await self.bot.db.fetchone("SELECT value FROM settings WHERE key='voice_template_channel_id'")
            if row and str(row[0]).isdigit():
                self.template_channel_id = int(row[0])
        except Exception as e:
            print(f"Failed to load voice template id: {e}")

    async def get_user_voice_settings(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.bot.db.fetchone(
                "SELECT channel_name, user_limit, is_locked FROM voice_settings WHERE user_id = ?",
                user_id
            )
            if result:
                return {
                    'channel_name': result[0] or '',
                    'user_limit': result[1] or 0,
                    'is_locked': bool(result[2])
                }
            return {'channel_name': '', 'user_limit': 0, 'is_locked': False}
        except Exception as e:
            print(f"Failed to get user voice settings: {e}")
            return {'channel_name': '', 'user_limit': 0, 'is_locked': False}

    async def save_user_voice_settings(self, user_id: int, channel_name: str = '', user_limit: int = 0, is_locked: bool = False):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await self.bot.db.exec(
                """INSERT OR REPLACE INTO voice_settings (user_id, channel_name, user_limit, is_locked) 
                   VALUES (?, ?, ?, ?)""",
                user_id, channel_name, user_limit, is_locked
            )
        except Exception as e:
            print(f"Failed to save user voice settings: {e}")

    @discord.app_commands.command(name="voice-setup", description="–£–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
    @discord.app_commands.describe(template_channel="–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª-—à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    async def voice_setup(self, interaction: discord.Interaction, template_channel: discord.VoiceChannel):
        if not interaction.user.guild_permissions.manage_channels:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
            return
            
        self.template_channel_id = template_channel.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        try:
            await self.bot.db.exec(
                "INSERT OR REPLACE INTO settings (key, value) VALUES ('voice_template_channel_id', ?)",
                str(template_channel.id)
            )
        except Exception as e:
            print(f"Failed to persist voice template id: {e}")

        await interaction.response.send_message(f"‚úÖ –®–∞–±–ª–æ–Ω –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {template_channel.mention}", ephemeral=True)

    @discord.app_commands.command(name="voice-status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª")
    async def voice_status(self, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.manage_channels:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
            return
            
        if self.template_channel_id:
            channel = interaction.guild.get_channel(self.template_channel_id)
            if channel:
                await interaction.response.send_message(f"üì¢ –¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: {channel.mention}", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", ephemeral=True)

    @discord.app_commands.command(name="voice-settings", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    async def voice_settings(self, interaction: discord.Interaction):
        settings = await self.get_user_voice_settings(interaction.user.id)
        
        embed = discord.Embed(
            title="üéõÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
            color=0x5865F2
        )
        
        channel_name = settings['channel_name'] or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        user_limit = settings['user_limit'] or 0
        is_locked = settings['is_locked']
        
        embed.add_field(
            name="üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            value=channel_name,
            inline=True
        )
        embed.add_field(
            name="üë• –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            value="–ë–µ–∑ –ª–∏–º–∏—Ç–∞" if user_limit == 0 else str(user_limit),
            inline=True
        )
        embed.add_field(
            name="üîí –°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
            value="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_locked else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            inline=True
        )
        
        embed.set_footer(text="–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    async def create_control_panel(self, voice_channel: discord.VoiceChannel, owner: discord.Member):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            overwrites = {
                voice_channel.guild.default_role: discord.PermissionOverwrite(view_channel=False),
                owner: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            }
            
            text_channel = await voice_channel.guild.create_text_channel(
                name=f"control-{voice_channel.name.lower().replace('üîí ', '').replace(' ', '-')}",
                category=voice_channel.category,
                overwrites=overwrites,
                reason="Voice control panel"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
            self.text_channels[voice_channel.id] = text_channel.id
            
            # –°–æ–∑–¥–∞–µ–º embed —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            embed = discord.Embed(
                title="üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º",
                description=f"**–ö–∞–Ω–∞–ª:** {voice_channel.mention}\n**–í–ª–∞–¥–µ–ª–µ—Ü:** {owner.mention}",
                color=0x5865F2
            )
            embed.add_field(
                name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                value="‚Ä¢ ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª\n‚Ä¢ üë• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª\n‚Ä¢ üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª\n‚Ä¢ üëë –ü–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ\n‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
                inline=False
            )
            embed.set_footer(text="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            view = VoiceControlView(voice_channel, owner.id)
            await text_channel.send(embed=embed, view=view)
            
        except Exception as e:
            print(f"Failed to create control panel: {e}")

    @commands.Cog.listener()
    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —à–∞–±–ª–æ–Ω
        if self.template_channel_id and after.channel and after.channel.id == self.template_channel_id:
            try:
                guild = member.guild
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = await self.get_user_voice_settings(member.id)
                channel_name = settings['channel_name'] or member.display_name
                user_limit = settings['user_limit'] or 0
                is_locked = settings['is_locked']
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                overwrites = {
                    guild.default_role: discord.PermissionOverwrite(view_channel=False, connect=not is_locked),
                    member: discord.PermissionOverwrite(view_channel=True, connect=True, manage_channels=True),
                }
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                new_channel = await guild.create_voice_channel(
                    name=f"üîí {channel_name}",
                    category=after.channel.category,
                    overwrites=overwrites,
                    user_limit=user_limit if user_limit > 0 else None,
                    reason="Create private voice",
                )
                self.owner_map[new_channel.id] = member.id
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await self.create_control_panel(new_channel, member)
                
                try:
                    await member.move_to(new_channel)
                except Exception as e:
                    print(f"Failed to move user to new channel: {e}")
            except Exception as e:
                print(f"Failed to create private voice channel: {e}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –∏—Ö –ø–∞–Ω–µ–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if before.channel and before.channel.id in self.owner_map:
            if len(before.channel.members) == 0:
                owner_id = self.owner_map.pop(before.channel.id)
                
                # –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if before.channel.id in self.text_channels:
                    text_channel_id = self.text_channels.pop(before.channel.id)
                    try:
                        text_channel = before.channel.guild.get_channel(text_channel_id)
                        if text_channel:
                            await text_channel.delete(reason="Voice channel deleted")
                    except Exception as e:
                        print(f"Failed to delete text channel: {e}")
                
                try:
                    await before.channel.delete(reason=f"Private voice empty (owner {owner_id})")
                except Exception as e:
                    print(f"Failed to delete voice channel: {e}")

    @commands.hybrid_group(name="voice", with_app_command=True)
    async def voice_group(self, ctx: commands.Context):
        pass

    @voice_group.command(name="transfer")
    async def voice_transfer(self, ctx: commands.Context, new_owner: discord.Member):
        if not ctx.author.voice or not ctx.author.voice.channel:
            return await ctx.reply("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–≤–æ—ë–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.")
        channel = ctx.author.voice.channel
        if self.owner_map.get(channel.id) != ctx.author.id:
            return await ctx.reply("–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞.")
        self.owner_map[channel.id] = new_owner.id
        await ctx.reply(f"–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞: {new_owner.mention}")


async def setup(bot: commands.Bot):
    await bot.add_cog(PrivateVoice(bot))