from __future__ import annotations

import asyncio
import logging
import random
from datetime import datetime, timedelta

import discord
from discord.ext import commands

log = logging.getLogger(__name__)


class Levels(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.xp_cooldown = 60  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º XP
        self.xp_range = (15, 25)  # –¥–∏–∞–ø–∞–∑–æ–Ω XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.level_multiplier = 1.2  # –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è

    def calculate_level(self, xp: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞"""
        level = 0
        required_xp = 100
        while xp >= required_xp:
            xp -= required_xp
            level += 1
            required_xp = int(required_xp * self.level_multiplier)
        return level

    def calculate_xp_for_level(self, level: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –æ–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        total_xp = 0
        required_xp = 100
        for _ in range(level):
            total_xp += required_xp
            required_xp = int(required_xp * self.level_multiplier)
        return total_xp

    def calculate_xp_to_next_level(self, current_xp: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        current_level = self.calculate_level(current_xp)
        next_level_xp = self.calculate_xp_for_level(current_level + 1)
        return next_level_xp - current_xp

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.author.bot or not message.guild:
            return

        try:
            db = self.bot.db
            user_id = message.author.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            result = await db.fetchone(
                "SELECT last_message_time FROM user_levels WHERE user_id = ?", user_id
            )
            
            if result:
                last_message_time = datetime.fromisoformat(result[0])
                if datetime.now() - last_message_time < timedelta(seconds=self.xp_cooldown):
                    return
            else:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.exec(
                    "INSERT INTO user_levels (user_id, xp, level, last_message_time) VALUES (?, 0, 0, ?)",
                    user_id, datetime.now().isoformat()
                )

            # –ù–∞—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ–ø—ã—Ç
            xp_gained = random.randint(*self.xp_range)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await db.exec(
                "UPDATE user_levels SET xp = xp + ?, last_message_time = ? WHERE user_id = ?",
                xp_gained, datetime.now().isoformat(), user_id
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = await db.fetchone(
                "SELECT xp, level FROM user_levels WHERE user_id = ?", user_id
            )
            if not result:
                return

            old_xp, old_level = result
            new_level = self.calculate_level(old_xp)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–≤—ã—Å–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
            if new_level > old_level:
                await db.exec(
                    "UPDATE user_levels SET level = ? WHERE user_id = ?",
                    new_level, user_id
                )
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
                await self._give_level_rewards(message.guild, message.author, new_level)
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
                # await self._send_level_up_message(message, message.author, new_level, old_level)

        except Exception as e:
            log.exception("Error in level system: %s", e)

    async def _send_level_up_message(self, message: discord.Message, user: discord.Member, new_level: int, old_level: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è"""
        try:
            embed = discord.Embed(
                title="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                description=f"{user.mention} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Å **{old_level}** –¥–æ **{new_level}**!",
                color=discord.Color.gold()
            )
            embed.set_thumbnail(url=user.display_avatar.url)
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç",
                value=f"{await self._get_user_xp(user.id)} XP",
                inline=True
            )
            embed.add_field(
                name="–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                value=f"{self.calculate_xp_to_next_level(await self._get_user_xp(user.id))} XP",
                inline=True
            )
            embed.timestamp = discord.utils.utcnow()
            
            await message.channel.send(embed=embed)
        except Exception as e:
            log.exception("Failed to send level up message: %s", e)

    async def _get_user_xp(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = self.bot.db
            result = await db.fetchone("SELECT xp FROM user_levels WHERE user_id = ?", user_id)
            return result[0] if result else 0
        except Exception:
            return 0

    async def _get_user_level(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = self.bot.db
            result = await db.fetchone("SELECT level FROM user_levels WHERE user_id = ?", user_id)
            return result[0] if result else 0
        except Exception:
            return 0

    async def _give_level_rewards(self, guild: discord.Guild, user: discord.Member, level: int):
        """–í—ã–¥–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        try:
            db = self.bot.db
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –Ω–∏–∂–µ
            rewards = await db.fetchall(
                "SELECT role_id, role_name FROM level_rewards WHERE level <= ? ORDER BY level DESC",
                level
            )
            
            if not rewards:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role_ids = {role.id for role in user.roles}
            
            for role_id, role_name in rewards:
                if role_id not in user_role_ids:
                    role = guild.get_role(role_id)
                    if role and role not in user.roles:
                        try:
                            await user.add_roles(role, reason=f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {level} —É—Ä–æ–≤–Ω—è")
                            log.info(f"Gave reward role {role_name} to {user} for level {level}")
                        except Exception as e:
                            log.exception(f"Failed to give role {role_name} to {user}: {e}")
                            
        except Exception as e:
            log.exception(f"Error giving level rewards to {user}: {e}")

    async def _remove_level_rewards(self, guild: discord.Guild, user: discord.Member, level: int):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        try:
            db = self.bot.db
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            rewards = await db.fetchall(
                "SELECT role_id, role_name FROM level_rewards WHERE level > ?",
                level
            )
            
            if not rewards:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role_ids = {role.id for role in user.roles}
            
            for role_id, role_name in rewards:
                if role_id in user_role_ids:
                    role = guild.get_role(role_id)
                    if role and role in user.roles:
                        try:
                            await user.remove_roles(role, reason=f"–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ {level}")
                            log.info(f"Removed reward role {role_name} from {user} due to level {level}")
                        except Exception as e:
                            log.exception(f"Failed to remove role {role_name} from {user}: {e}")
                            
        except Exception as e:
            log.exception(f"Error removing level rewards from {user}: {e}")

    @commands.hybrid_command(name="lvl", description="–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def lvl(self, ctx: commands.Context, user: discord.Member | None = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        target_user = user or ctx.author
        
        try:
            xp = await self._get_user_xp(target_user.id)
            level = self.calculate_level(xp)
            xp_to_next = self.calculate_xp_to_next_level(xp)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            current_level_xp = self.calculate_xp_for_level(level)
            next_level_xp = self.calculate_xp_for_level(level + 1)
            progress = xp - current_level_xp
            total_needed = next_level_xp - current_level_xp
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_length = 10
            filled_length = int((progress / total_needed) * bar_length) if total_needed > 0 else bar_length
            bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)
            
            embed = discord.Embed(
                title=f"üìä –£—Ä–æ–≤–µ–Ω—å {target_user.display_name}",
                color=discord.Color.blurple()
            )
            embed.set_thumbnail(url=target_user.display_avatar.url)
            embed.add_field(
                name="–£—Ä–æ–≤–µ–Ω—å",
                value=f"**{level}**",
                inline=True
            )
            embed.add_field(
                name="–û–ø—ã—Ç",
                value=f"**{xp:,}** XP",
                inline=True
            )
            embed.add_field(
                name="–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                value=f"**{xp_to_next:,}** XP",
                inline=True
            )
            embed.add_field(
                name="–ü—Ä–æ–≥—Ä–µ—Å—Å",
                value=f"`{bar}` {progress}/{total_needed}",
                inline=False
            )
            embed.timestamp = discord.utils.utcnow()
            
            await ctx.reply(embed=embed)
            
        except Exception as e:
            log.exception("Error in level command: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ.")

    @commands.hybrid_command(name="leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é")
    async def leaderboard(self, ctx: commands.Context, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é"""
        if limit < 1 or limit > 25:
            await ctx.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 25.")
            return
            
        try:
            db = self.bot.db
            results = await db.fetchall(
                "SELECT user_id, xp, level FROM user_levels ORDER BY xp DESC LIMIT ?",
                limit
            )
            
            if not results:
                await ctx.reply("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω—è—Ö.")
                return
            
            embed = discord.Embed(
                title="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é",
                color=discord.Color.gold()
            )
            
            description = ""
            for i, (user_id, xp, level) in enumerate(results, 1):
                user = ctx.guild.get_member(user_id)
                if user:
                    medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"**{i}.**"
                    description += f"{medal} {user.mention} - –£—Ä–æ–≤–µ–Ω—å **{level}** ({xp:,} XP)\n"
            
            embed.description = description
            embed.timestamp = discord.utils.utcnow()
            
            await ctx.reply(embed=embed)
            
        except Exception as e:
            log.exception("Error in leaderboard command: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    @commands.hybrid_command(name="level-reset", description="–°–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @commands.has_guild_permissions(administrator=True)
    async def level_reset(self, ctx: commands.Context, user: discord.Member):
        """–°–±—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = self.bot.db
            # –£–¥–∞–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            await self._remove_level_rewards(ctx.guild, user, 0)
            
            await db.exec(
                "UPDATE user_levels SET xp = 0, level = 0 WHERE user_id = ?",
                user.id
            )
            await ctx.reply(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} —Å–±—Ä–æ—à–µ–Ω.")
        except Exception as e:
            log.exception("Error in level reset: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —É—Ä–æ–≤–Ω—è.")

    @commands.hybrid_command(name="reward-add", description="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É-—Ä–æ–ª—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å")
    @commands.has_guild_permissions(administrator=True)
    async def reward_add(self, ctx: commands.Context, level: int, role: discord.Role):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É-—Ä–æ–ª—å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        if level < 1:
            await ctx.reply("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
            
        try:
            db = self.bot.db
            await db.exec(
                "INSERT OR REPLACE INTO level_rewards (level, role_id, role_name) VALUES (?, ?, ?)",
                level, role.id, role.name
            )
            await ctx.reply(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ {role.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞ {level} —É—Ä–æ–≤–µ–Ω—å.")
        except Exception as e:
            log.exception("Error adding level reward: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã.")

    @commands.hybrid_command(name="reward-remove", description="–£–¥–∞–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É-—Ä–æ–ª—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å")
    @commands.has_guild_permissions(administrator=True)
    async def reward_remove(self, ctx: commands.Context, level: int):
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É-—Ä–æ–ª—å –∑–∞ —É—Ä–æ–≤–µ–Ω—å"""
        try:
            db = self.bot.db
            result = await db.fetchone("SELECT role_name FROM level_rewards WHERE level = ?", level)
            if not result:
                await ctx.reply(f"‚ùå –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ {level} —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            await db.exec("DELETE FROM level_rewards WHERE level = ?", level)
            await ctx.reply(f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ {level} —É—Ä–æ–≤–µ–Ω—å —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            log.exception("Error removing level reward: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã.")

    @commands.hybrid_command(name="rewards-list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–Ω–∏")
    async def rewards_list(self, ctx: commands.Context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–Ω–∏"""
        try:
            db = self.bot.db
            rewards = await db.fetchall(
                "SELECT level, role_name FROM level_rewards ORDER BY level ASC"
            )
            
            if not rewards:
                await ctx.reply("üìã –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
                return
                
            embed = discord.Embed(
                title="üèÜ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–Ω–∏",
                color=discord.Color.gold()
            )
            
            description = ""
            for level, role_name in rewards:
                description += f"**–£—Ä–æ–≤–µ–Ω—å {level}:** {role_name}\n"
                
            embed.description = description
            embed.timestamp = discord.utils.utcnow()
            
            await ctx.reply(embed=embed)
            
        except Exception as e:
            log.exception("Error listing rewards: %s", e)
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–≥—Ä–∞–¥.")


async def setup(bot: commands.Bot):
    await bot.add_cog(Levels(bot))
